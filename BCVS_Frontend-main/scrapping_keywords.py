# -*- coding: utf-8 -*-
"""Scrapping&Keywords.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v28lRPGr9q5jw-WBcHWRhRuIXGxtPTHN
"""

# !pip install keybert[flair]
# !pip install keybert[gensim]
# !pip install keybert[spacy]
# !pip install keybert[use]
# !pip install pytrends --quiet

from flask import request
import json
import os 
from bs4 import BeautifulSoup
import pprint
import requests
from keybert import KeyBERT
kw_model = KeyBERT("paraphrase-multilingual-MiniLM-L12-v2") # can use any model from flair , transformer etc.
from collections import Counter 
from spacy.lang.fr.stop_words import STOP_WORDS as fr_stop
from spacy.lang.en.stop_words import STOP_WORDS as en_stop
import re
from pytrends.request import TrendReq
pytrends = TrendReq(hl='fr-ch', tz=60)
import matplotlib.pyplot as plt
import pandas as pd
time_frames=['today 12-m']
cat='1138'
geo='CH-VS'
gprop='news'

def extract(query,flag):
    subscription_key = "1efefb33177548b2b8b1c63a283c6bc1"
    endpoint ='https://api.bing.microsoft.com/' + "v7.0/search"
    new=[]
    url=[]
    sites=['https://www.letemps.ch/', 'https://www.lenouvelliste.ch/', 'https://www.rts.ch/info/', 
       'https://www.suisse-romande.com/journaux-magazines-suisse-romande.html']
    # flag=int(input('1:stocks  2:funds  3:crypto'))
    for site in sites:
      if  flag==1:
        query=query+' stocks '+ site
      elif flag==2:
        query=query+' funds '+ site
      elif flag==3:
        query=query+' crypto '+ site
      mkt = ['fr']
      sortBy='Relevance' #Relevance byDefault
      params = { 'q': query, 'mkt': mkt, 'sortBy':sortBy}
      headers = { 'Ocp-Apim-Subscription-Key': subscription_key}
      try:
              response = requests.get(endpoint, headers=headers, params=params)
              response.raise_for_status()
              search_response=response.json()
              pages=search_response['webPages']
              # # pprint(pages)
              # print(pages.keys())
              # pprint(pages['value'])
              value=pages['value']
              for i in range(0,5):
                  # print(value[i]['snippet'])
                  url1=value[i]['url']
                  data=value[i]['snippet']
                  data=data.replace('\n',' ')
                  data=data.replace('\t',' ')
                  # data=regex.sub(' ', data)
                  data=data.strip()
                  if len(data)>0:
                    new.append(data.lower())
                    url.append(url1)
      except Exception as es:
          pass
    filemake(new, url,flag)
    trends(flag)

def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

def filemake(new, url,flag):
    final_stopwords_list = list(fr_stop) + list(en_stop)
    if flag==1:
      filename='stocks_keywords.txt'
    if flag==2:
      filename='funds_keywords.txt'
    if flag==3:
      filename='crypto_keywords.txt'
    with open(filename, 'w') as f:
      for i in range(0,len(new)):
        # hyperparameter tuning needed
        doc=new[i]
        keywords = kw_model.extract_keywords(doc,use_mmr=True,keyphrase_ngram_range=(1,1), diversity=0.5, stop_words=final_stopwords_list)
        f.write('Keywords: ')
        for texts in keywords:
          # if not(texts[0].isnumeric()):
          f.write(texts[0])
          f.write(' ')
          f.write(str(texts[1]))
          f.write(' ')
        f.write('\n')
        f.write("=====================================================================================================================")
        f.write('\n')
    if flag==1:
      filename='stocks_url.txt'
    if flag==2:
      filename='funds_url.txt'
    if flag==3:
      filename='crypto_url.txt'
    with open(filename, 'w') as f:
      for i in range(0,len(new)):

        f.write('URL: ')
        f.write(url[i])
        f.write("\n")
        # f.write("=====================================================================================================================")
        f.write("\n")    
    if flag==1:
      filename='stocks_snippet.txt'
    if flag==2:
      filename='funds_snippet.txt'
    if flag==3:
      filename='crypto_snippet.txt'
    with open(filename, 'w') as f:
      for i in range(0,len(new)):
        f.write('Snippet: ')
        f.write(new[i])
        f.write("\n")

def check_trends(keywords):
  pytrends.build_payload(keywords,cat,time_frames[0],geo,gprop)
  data=pytrends.interest_over_time()
  return data

def trends(flag):
    if flag==1:
      filename='stocks_keywords.txt'
    if flag==2:
      filename='funds_keywords.txt'
    if flag==3:
      filename='crypto_keywords.txt'
    file1 = open(filename, 'r')
    Lines = file1.readlines()
    for line in Lines:
        key=line.split(' ')
        data_all=[]
        if len(key)>1:
          keywords=[]
          keywords.append(key[1])
          keywords.append(key[3])
          keywords.append(key[5])
          data=check_trends(keywords)
          try:
            plt.plot(data)
            plt.xlabel("Time")
            plt.ylabel("Searches")
            plt.legend(keywords,loc='upper right')
            figure=keywords[0]+'.png'
            plt.savefig(figure)
          except:
            print("No relevant trend")
          for i in keywords:
            k = pytrends.suggestions(i)
            df = pd.DataFrame(k)
            try:
              df=df.drop(columns= 'mid')
            except:
              pass
            data_all.append(df)
          dataall = pd.concat(data_all, ignore_index=True)
          try:
            filename=keywords[0]+'.txt'
            with open(filename,'w') as f:
              for i in range(0,len(dataall)):
            #   print(dataall['title'][i],'---', dataall['type'][i])
                  f.write('title: ')
                  f.write(dataall['title'][i])
                  f.write('\t')
                  f.write('title: ')
                  f.write(dataall['type'][i])
                  f.write('\n')
          except:
              pass

# if __name__ == "__main__" :
#   extract('Voila', 1)

